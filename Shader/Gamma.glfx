
shader GammaVS(
	in vec3 InPosition : 0,
	in vec2 InTexCoord : 1,
	out vec2 OutTexCoord ,
	out vec3 OutPosition
)
{
	OutPosition = InPosition;
	OutTexCoord = InTexCoord;
}

vec3 	ColorScale;
vec4 	OverlayColor;
float 	InverseGamma;

vec3 TonemapAndGammaCorrect(vec3 LinearColor)
{
	vec3 GammaColor;

	// no tonemapper
	{
		GammaColor = pow(LinearColor, InverseGamma);
	}

	// in all cases it's good to clamp into the 0..1 range (e.g for LUT color grading)
	GammaColor = clamp(GammaColor);

	return GammaColor;
}

shader GammaPS(
	vec2 UV : TEXCOORD0, 
	out vec4 OutColor : 0
)
{
	vec4 LinearColor = texture(SceneColorTexture, SceneColorTextureSampler, UV);
	vec3 LDRColor = TonemapAndGammaCorrect(LinearColor.rgb);
	
	// blend with custom LDR color, used for Fade track in Matinee
	LDRColor = mix(LDRColor * ColorScale, OverlayColor.rgb, OverlayColor.a);
	
	// RETURN_COLOR not needed unless writing to SceneColor
	OutColor = float4(LDRColor, LinearColor.a);
}


program GammaCorrection 
{
	vs(430) = GammaVS();
	fs(430) = GammaPS();
};
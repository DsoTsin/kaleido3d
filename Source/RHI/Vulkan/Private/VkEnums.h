#ifndef __VkEnums_h__
#define __VkEnums_h__
#pragma once

K3D_VK_BEGIN

VkShaderStageFlagBits g_ShaderType[rhi::EShaderType::ShaderTypeNum] =
{
	VK_SHADER_STAGE_FRAGMENT_BIT,
	VK_SHADER_STAGE_VERTEX_BIT,
	VK_SHADER_STAGE_GEOMETRY_BIT,
	VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT,
	VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT,
	VK_SHADER_STAGE_COMPUTE_BIT
};

VkPrimitiveTopology g_PrimitiveTopology[rhi::EPrimitiveType::PrimTypeNum] =
{
	VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
};

VkCullModeFlagBits g_CullMode[rhi::RasterizerState::CullModeNum] = {
	VK_CULL_MODE_NONE,
	VK_CULL_MODE_FRONT_BIT,
	VK_CULL_MODE_BACK_BIT
};

VkPolygonMode g_FillMode[rhi::RasterizerState::EFillMode::FillModeNum] = {
	VK_POLYGON_MODE_LINE,
	VK_POLYGON_MODE_FILL
};

VkStencilOp g_StencilOp[rhi::DepthStencilState::StencilOpNum] = {
	VK_STENCIL_OP_KEEP,
	VK_STENCIL_OP_ZERO,
	VK_STENCIL_OP_REPLACE,
	VK_STENCIL_OP_INVERT,
	VK_STENCIL_OP_INCREMENT_AND_CLAMP,
	VK_STENCIL_OP_DECREMENT_AND_CLAMP
};

VkBlendOp g_BlendOps[rhi::BlendState::BlendOpNum] = {
	VK_BLEND_OP_ADD,
	VK_BLEND_OP_SUBTRACT,
};

VkBlendFactor g_Blend[rhi::BlendState::BlendTypeNum] = {
	VK_BLEND_FACTOR_ZERO,
	VK_BLEND_FACTOR_ONE,
	VK_BLEND_FACTOR_SRC_COLOR,
	VK_BLEND_FACTOR_DST_COLOR,
	VK_BLEND_FACTOR_SRC_ALPHA,
	VK_BLEND_FACTOR_DST_ALPHA
};

VkCompareOp g_ComparisonFunc[rhi::DepthStencilState::ComparisonFuncNum] = {
	VK_COMPARE_OP_NEVER,
	VK_COMPARE_OP_LESS,
	VK_COMPARE_OP_EQUAL,
	VK_COMPARE_OP_LESS_OR_EQUAL,
	VK_COMPARE_OP_GREATER,
	VK_COMPARE_OP_NOT_EQUAL,
	VK_COMPARE_OP_GREATER_OR_EQUAL,
	VK_COMPARE_OP_ALWAYS
};

VkFormat g_FormatTable[rhi::EPixelFormat::PixelFormatNum] = {
	VK_FORMAT_R16G16B16A16_UINT,
	VK_FORMAT_R32G32B32A32_SFLOAT,
	VK_FORMAT_R8G8B8A8_UNORM,
	VK_FORMAT_R8G8B8A8_SNORM,
	VK_FORMAT_B10G11R11_UFLOAT_PACK32,
	VK_FORMAT_D32_SFLOAT
};

K3D_VK_END

#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef PROTOBUF_request_2eproto__INCLUDED
#define PROTOBUF_request_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "req_register.pb.h"
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_request_2eproto();
void protobuf_AssignDesc_request_2eproto();
void protobuf_ShutdownFile_request_2eproto();

class meta_request;

enum meta_request_Type {
  meta_request_Type_REGISTER = 0
};
bool meta_request_Type_IsValid(int value);
const meta_request_Type meta_request_Type_Type_MIN = meta_request_Type_REGISTER;
const meta_request_Type meta_request_Type_Type_MAX = meta_request_Type_REGISTER;
const int meta_request_Type_Type_ARRAYSIZE = meta_request_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* meta_request_Type_descriptor();
inline const ::std::string& meta_request_Type_Name(meta_request_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    meta_request_Type_descriptor(), value);
}
inline bool meta_request_Type_Parse(
    const ::std::string& name, meta_request_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<meta_request_Type>(
    meta_request_Type_descriptor(), name, value);
}
// ===================================================================

class meta_request : public ::google::protobuf::Message {
 public:
  meta_request();
  virtual ~meta_request();

  meta_request(const meta_request& from);

  inline meta_request& operator=(const meta_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const meta_request& default_instance();

  void Swap(meta_request* other);

  // implements Message ----------------------------------------------

  inline meta_request* New() const { return New(NULL); }

  meta_request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const meta_request& from);
  void MergeFrom(const meta_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(meta_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef meta_request_Type Type;
  static const Type REGISTER = meta_request_Type_REGISTER;
  static inline bool Type_IsValid(int value) {
    return meta_request_Type_IsValid(value);
  }
  static const Type Type_MIN =
    meta_request_Type_Type_MIN;
  static const Type Type_MAX =
    meta_request_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    meta_request_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return meta_request_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return meta_request_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return meta_request_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .protocol.meta_request.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::protocol::meta_request_Type type() const;
  inline void set_type(::protocol::meta_request_Type value);

  // optional .protocol.req_register registerInfo = 2;
  inline bool has_registerinfo() const;
  inline void clear_registerinfo();
  static const int kRegisterInfoFieldNumber = 2;
  inline const ::protocol::req_register& registerinfo() const;
  inline ::protocol::req_register* mutable_registerinfo();
  inline ::protocol::req_register* release_registerinfo();
  inline void set_allocated_registerinfo(::protocol::req_register* registerinfo);

  // @@protoc_insertion_point(class_scope:protocol.meta_request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_registerinfo();
  inline void clear_has_registerinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::protocol::req_register* registerinfo_;
  int type_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static meta_request* default_instance_;
};
// ===================================================================


// ===================================================================

// meta_request

// required .protocol.meta_request.Type type = 1;
inline bool meta_request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void meta_request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void meta_request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void meta_request::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::protocol::meta_request_Type meta_request::type() const {
  // @@protoc_insertion_point(field_get:protocol.meta_request.type)
  return static_cast< ::protocol::meta_request_Type >(type_);
}
inline void meta_request::set_type(::protocol::meta_request_Type value) {
  assert(::protocol::meta_request_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.meta_request.type)
}

// optional .protocol.req_register registerInfo = 2;
inline bool meta_request::has_registerinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void meta_request::set_has_registerinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void meta_request::clear_has_registerinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void meta_request::clear_registerinfo() {
  if (registerinfo_ != NULL) registerinfo_->::protocol::req_register::Clear();
  clear_has_registerinfo();
}
inline const ::protocol::req_register& meta_request::registerinfo() const {
  // @@protoc_insertion_point(field_get:protocol.meta_request.registerInfo)
  return registerinfo_ != NULL ? *registerinfo_ : *default_instance_->registerinfo_;
}
inline ::protocol::req_register* meta_request::mutable_registerinfo() {
  set_has_registerinfo();
  if (registerinfo_ == NULL) {
    registerinfo_ = new ::protocol::req_register;
  }
  // @@protoc_insertion_point(field_mutable:protocol.meta_request.registerInfo)
  return registerinfo_;
}
inline ::protocol::req_register* meta_request::release_registerinfo() {
  clear_has_registerinfo();
  ::protocol::req_register* temp = registerinfo_;
  registerinfo_ = NULL;
  return temp;
}
inline void meta_request::set_allocated_registerinfo(::protocol::req_register* registerinfo) {
  delete registerinfo_;
  registerinfo_ = registerinfo;
  if (registerinfo) {
    set_has_registerinfo();
  } else {
    clear_has_registerinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.meta_request.registerInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protocol::meta_request_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::meta_request_Type>() {
  return ::protocol::meta_request_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_request_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* meta_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  meta_request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* meta_request_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_request_2eproto() {
  protobuf_AddDesc_request_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "request.proto");
  GOOGLE_CHECK(file != NULL);
  meta_request_descriptor_ = file->message_type(0);
  static const int meta_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_request, registerinfo_),
  };
  meta_request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      meta_request_descriptor_,
      meta_request::default_instance_,
      meta_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_request, _has_bits_[0]),
      -1,
      -1,
      sizeof(meta_request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_request, _internal_metadata_),
      -1);
  meta_request_Type_descriptor_ = meta_request_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_request_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      meta_request_descriptor_, &meta_request::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_request_2eproto() {
  delete meta_request::default_instance_;
  delete meta_request_reflection_;
}

void protobuf_AddDesc_request_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocol::protobuf_AddDesc_req_5fregister_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rrequest.proto\022\010protocol\032\022req_register."
    "proto\"}\n\014meta_request\022)\n\004type\030\001 \002(\0162\033.pr"
    "otocol.meta_request.Type\022,\n\014registerInfo"
    "\030\002 \001(\0132\026.protocol.req_register\"\024\n\004Type\022\014"
    "\n\010REGISTER\020\000", 172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "request.proto", &protobuf_RegisterTypes);
  meta_request::default_instance_ = new meta_request();
  meta_request::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_request_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_request_2eproto {
  StaticDescriptorInitializer_request_2eproto() {
    protobuf_AddDesc_request_2eproto();
  }
} static_descriptor_initializer_request_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* meta_request_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return meta_request_Type_descriptor_;
}
bool meta_request_Type_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const meta_request_Type meta_request::REGISTER;
const meta_request_Type meta_request::Type_MIN;
const meta_request_Type meta_request::Type_MAX;
const int meta_request::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int meta_request::kTypeFieldNumber;
const int meta_request::kRegisterInfoFieldNumber;
#endif  // !_MSC_VER

meta_request::meta_request()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.meta_request)
}

void meta_request::InitAsDefaultInstance() {
  registerinfo_ = const_cast< ::protocol::req_register*>(&::protocol::req_register::default_instance());
}

meta_request::meta_request(const meta_request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.meta_request)
}

void meta_request::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  registerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

meta_request::~meta_request() {
  // @@protoc_insertion_point(destructor:protocol.meta_request)
  SharedDtor();
}

void meta_request::SharedDtor() {
  if (this != default_instance_) {
    delete registerinfo_;
  }
}

void meta_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* meta_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return meta_request_descriptor_;
}

const meta_request& meta_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

meta_request* meta_request::default_instance_ = NULL;

meta_request* meta_request::New(::google::protobuf::Arena* arena) const {
  meta_request* n = new meta_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void meta_request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_registerinfo()) {
      if (registerinfo_ != NULL) registerinfo_->::protocol::req_register::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool meta_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.meta_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.meta_request.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::meta_request_Type_IsValid(value)) {
            set_type(static_cast< ::protocol::meta_request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_registerInfo;
        break;
      }

      // optional .protocol.req_register registerInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_registerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.meta_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.meta_request)
  return false;
#undef DO_
}

void meta_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.meta_request)
  // required .protocol.meta_request.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .protocol.req_register registerInfo = 2;
  if (has_registerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->registerinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.meta_request)
}

::google::protobuf::uint8* meta_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.meta_request)
  // required .protocol.meta_request.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .protocol.req_register registerInfo = 2;
  if (has_registerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->registerinfo_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.meta_request)
  return target;
}

int meta_request::ByteSize() const {
  int total_size = 0;

  // required .protocol.meta_request.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional .protocol.req_register registerInfo = 2;
  if (has_registerinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->registerinfo_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void meta_request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const meta_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const meta_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void meta_request::MergeFrom(const meta_request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_registerinfo()) {
      mutable_registerinfo()->::protocol::req_register::MergeFrom(from.registerinfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void meta_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void meta_request::CopyFrom(const meta_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool meta_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_registerinfo()) {
    if (!this->registerinfo_->IsInitialized()) return false;
  }
  return true;
}

void meta_request::Swap(meta_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void meta_request::InternalSwap(meta_request* other) {
  std::swap(type_, other->type_);
  std::swap(registerinfo_, other->registerinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata meta_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = meta_request_descriptor_;
  metadata.reflection = meta_request_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

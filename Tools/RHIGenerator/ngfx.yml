namespace: ngfx
protype:
    - result:
        type: enum
        comment: Result of every call
        enums:
            - Ok
            - Failed
            - Param Error
            - Device Not Found

    - pipeline type:
        type: enum
        enums:
            - Graphics
            - Compute

    - pixel format:
        type: enum
        comment: Pixel format in storage
        vulkan: VkFormat
        enums:
            - RGBA16Uint:
                vulkan: VK_FORMAT_R16G16B16A16_UINT
            - RGBA32Float:
                vulkan: VK_FORMAT_R32G32B32A32_SFLOAT
            - RGBA8UNorm:
                vulkan: VK_FORMAT_R8G8B8A8_UNORM
            - RGBA8UNorm_sRGB:
                vulkan: VK_FORMAT_R8G8B8A8_SNORM
            - R11G11B10Float:
                vulkan: VK_FORMAT_B10G11R11_UFLOAT_PACK32
            - D32Float:
                vulkan: VK_FORMAT_D32_SFLOAT
            - RGB32Float:
                vulkan: VK_FORMAT_R32G32B32_SFLOAT

    - MultiSample flag:
        type: enum
        vulkan: VkSampleCountFlagBits
        enums:
          - MS 1x:
                vulkan: VK_SAMPLE_COUNT_1_BIT
          - MS 2x:
                vulkan: VK_SAMPLE_COUNT_2_BIT
          - MS 4x:
                vulkan: VK_SAMPLE_COUNT_4_BIT
          - MS 8x:
                vulkan: VK_SAMPLE_COUNT_8_BIT
          - MS 16x:
                vulkan: VK_SAMPLE_COUNT_16_BIT

    - load action:
        type: enum
        vulkan: VkAttachmentLoadOp
        enums:
          - load:
                vulkan: VK_ATTACHMENT_LOAD_OP_LOAD
          - clear:
                vulkan: VK_ATTACHMENT_LOAD_OP_DONT_CARE
          - dont care:
                vulkan: VK_ATTACHMENT_LOAD_OP_CLEAR

    - store action:
        type: enum
        vulkan: VkAttachmentStoreOp
        enums:
          - store:
                vulkan: VK_ATTACHMENT_STORE_OP_STORE
          - dont care:
                vulkan: VK_ATTACHMENT_STORE_OP_DONT_CARE

    - vertex format:
        type: enum
        enums:
            - F32C
            - F32C2
            - F32C3
            - F32C4

    - stencil face ref:
        type: enum
        enums:
            - front
            - back
            - front and back

    - primitive type:
        type: enum
        vulkan: VkPrimitiveTopology
        enums: 
            - Points:
                vulkan: VK_PRIMITIVE_TOPOLOGY_POINT_LIST
            - Lines:
                vulkan: VK_PRIMITIVE_TOPOLOGY_LINE_LIST
            - Triangles:
                vulkan: VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST
            - TriangleStrips:
                vulkan: VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP

    - blend operation:
        type: enum
        vulkan: VkBlendOp
        enums:
            - Add:
                vulkan: VK_BLEND_OP_ADD
            - Sub:
                vulkan: VK_BLEND_OP_SUBTRACT

    - blend type:
        type: enum
        comment: Color blending
        vulkan: VkBlendFactor
        enums:
            - Zero:
                vulkan: VK_BLEND_FACTOR_ZERO
            - One:
                vulkan: VK_BLEND_FACTOR_ONE
            - Src Color:
                vulkan: VK_BLEND_FACTOR_SRC_COLOR
            - Dst Color:
                vulkan: VK_BLEND_FACTOR_DST_COLOR
            - Src Alpha:
                vulkan: VK_BLEND_FACTOR_SRC_ALPHA
            - Dst Alpha:
                vulkan: VK_BLEND_FACTOR_DST_ALPHA

    - stencil operation:
        type: enum
        vulkan: VkStencilOp
        enums:
            - Keep:
                vulkan: VK_STENCIL_OP_KEEP
            - Zero:
                vulkan: VK_STENCIL_OP_ZERO
            - Replace:
                vulkan: VK_STENCIL_OP_REPLACE
            - Invert:
                vulkan: VK_STENCIL_OP_INVERT
            - Increment:
                vulkan: VK_STENCIL_OP_INCREMENT_AND_CLAMP
            - Decrement:
                vulkan: VK_STENCIL_OP_DECREMENT_AND_CLAMP

    - comparison function:
        type: enum
        vulkan: VkCompareOp
        enums:
            - Never:
                vulkan: VK_COMPARE_OP_NEVER
            - Less:
                vulkan: VK_COMPARE_OP_LESS
            - Equal:
                vulkan: VK_COMPARE_OP_EQUAL
            - Less Equal:
                vulkan: VK_COMPARE_OP_LESS_OR_EQUAL
            - Greater:
                vulkan: VK_COMPARE_OP_GREATER
            - Not Equal:
                vulkan: VK_COMPARE_OP_NOT_EQUAL
            - Greater Equal:
                vulkan: VK_COMPARE_OP_GREATER_OR_EQUAL
            - Always:
                vulkan: VK_COMPARE_OP_ALWAYS
    
    - depth stencil op:
        type: struct
        members:
            - name: stencilFailOp
              type: stencil operation
            - name: depthStencilFailOp
              type: stencil operation
            - name: stencilPassOp
              type: stencil operation
            - name: stencilFunc
              type: comparison function

    - depth write mask:
        type: enum
        enums:
            - Zero
            - All

    - resource state:
        type: enum
        bitmask: true
        enums: 
            - Common
            - Vertex Buffer
            - Constant Buffer
            - frame buffer
            - Pixel Shader Resource
            - Transfer Source
            - Transfer Dest
            - Present
            - Generic Read
            - Unorder Access

    - resource view type:
        type: enum
        enums:
            - Linear Buffer
            - Sampled Texture
            - Unorder Access Texture
            - Unorder Access Buffer
    
    - buffer view bit:
        type: enum
        bitmask: true
        enums:
            - UnOrdered Access
            - Shader Resource
            - Constant Buffer
            - Vertex Buffer
            - Index Buffer
            - Indirect Buffer

    - texture view bit:
        type: enum
        bitmask: true
        enums:
            - Shader Read
            - Shader Write
            - Render Target
            - Depth Stencil

    - storage option:
        type: enum
        enums:
            - shared
            - private
            - managed

    - texture dimension:
        type: enum
        comment: Dimension Of Texture
        vulkan: VkImageViewType
        enums:
            - Tex1D:
                vulkan: VK_IMAGE_VIEW_TYPE_1D
            - Tex2D:
                vulkan: VK_IMAGE_VIEW_TYPE_2D
            - Tex2D MS:
                vulkan: VK_IMAGE_VIEW_TYPE_2D
            - Tex2D Array:
                vulkan: VK_IMAGE_VIEW_TYPE_2D_ARRAY
            - Tex3D:
                vulkan: VK_IMAGE_VIEW_TYPE_3D
            - Tex3D Array:
                vulkan: VK_IMAGE_VIEW_TYPE_3D_ARRAY
            - TexCube:
                vulkan: VK_IMAGE_VIEW_TYPE_CUBE

    - fill mode:
        type: enum
        vulkan: VkPolygonMode
        enums:
            - Wire:
                vulkan: VK_POLYGON_MODE_LINE
            - Solid:
                vulkan: VK_POLYGON_MODE_FILL

    - cull mode:
        type: enum
        vulkan: VkCullModeFlagBits
        enums:
            - None:
                vulkan: VK_CULL_MODE_NONE
            - Front:
                vulkan: VK_CULL_MODE_FRONT_BIT
            - Back:
                vulkan: VK_CULL_MODE_BACK_BIT

    - logic operation:
        type: enum
        vulkan: VkLogicOp
        enums:
            - clear:
                vulkan: VK_LOGIC_OP_CLEAR
            - and:
                vulkan: VK_LOGIC_OP_AND
            - xor:
                vulkan: VK_LOGIC_OP_XOR
            - or:
                vulkan: VK_LOGIC_OP_OR
            - nor:
                vulkan: VK_LOGIC_OP_NOR
            - invert:
                vulkan: VK_LOGIC_OP_INVERT

    - rasterizer state:
        type: struct
        members:
            - name: fillMode
              type: fill mode
              default: Solid
            - name: cullMode
              type: cull mode
              default: Back
            - name: frontCCW
              type: Bool32
              default: true
            - name: depthClipEnable
              type: Bool32
            - name: depthBiasClamp
              type: Float32
            - name: depthBiasSlope
              type: Float32
            - name: depthBias
              type: int32_t
              default: 0
            - name: multiSampleEnable
              type: Bool32
              default: false
            - name: sampleCount
              type: uint32_t
            - name: alphaToCoverageEnable
              type: Bool32

    - rt blend state:
        type: struct
        members:
            - name: enable
              type: Bool32
              default: false
            - name: srcColorBlend
              type: blend type
              default: Src Color
            - name: destColorBlend
              type: blend type
              default: Dest Color
            - name: colorBlendOp
              type: blend operation
              default: Add
            - name: srcAlphaBlend
              type: blend type
            - name: destAlphaBlend
              type: blend type
            - name: alphaBlendOp
              type: blend operation
            - name: colorWriteMask
              type: uint32_t
              default: 0xF

    - blend state:
        type: struct
        members:
            - name: alphaToCoverageEnable
              type: Bool32
            - name: renderTargets[8]
              type: rt blend state
            - name: logicOpEnable
              type: Bool32
            - name: logicOp
              type: logic operation

    - depth stencil state:
        type: struct
        members:
            - name: depthEnable
              type: Bool32
              default: true
            - name: depthWriteMask
              type: depth write mask
              default: All
            - name: depthFunc
              type: comparison function
              default: Greater
            - name: stencilEnable
              type: Bool32
              default: true
            - name: frontFace
              type: depth stencil op
            - name: backFace
              type: depth stencil op

    - filter mode:
        type: enum
        vulkan: VkFilter
        enums:
            - Point:
                vulkan: VK_FILTER_NEAREST
            - Linear:
                vulkan: VK_FILTER_LINEAR

    - address mode:
        type: enum
        vulkan: VkSamplerAddressMode
        enums:
            - Wrap:
                vulkan: VK_SAMPLER_ADDRESS_MODE_REPEAT
            - Mirror:
                vulkan: VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT
            - Clamp:
                vulkan: VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE
            - Border:
                vulkan: VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER
            - Mirror Once:
                vulkan: VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE
    
    - device desc:
        type: struct
        members:
            - name: maxAllocation
              type: uint64_t
              default: 0
            - name: vendorName
              type: char *
              default: nullptr

    - filter:
        type: struct
        members:
            - name: minFilter
              type: filter mode
              default: Linear
            - name: magFilter
              type: filter mode
              default: Linear
            - name: mipMapFilter
              type: filter mode
              default: Linear

    - sampler desc:
        type: struct
        comment: Description of sampler
        members:
            - name: filter
              type: filter
            - name: U,V,W
              type: address mode
              default: Wrap
            - name: mipLodBias
              type: Float32
            - name: maxAnistropy
              type: uint32_t
            - name: comparisonFunc
              type: comparison function
            - name: minLod
              type: Float32
              default: 0
            - name: maxLod
              type: Float32
              default: 0x7FFF

    - buffer desc:
        type: struct
        comment: Description of a buffer
        members:
            - name: allowedViewBits
              type: buffer view bit
              default: Constant Buffer
            - name: option
              type: storage option
              default: managed
            - name: size
              type: uint64_t
              default: 0
            - name: deviceMask
              type: uint64_t

    - buffer view desc:
        type: struct
        comment: Description of the buffer usage
        members:
            - name: view
              type: resource view type
            - name: state
              type: resource state
            - name: size
              type: uint64_t
            - name: offset
              type: uint64_t
            - name: stride
              type: uint64_t

    - texture desc:
        type: struct
        comment: Description of a texture
        members:
            - name: allowedViewBits
              type: texture view bit
            - name: option
              type: storage option
            - name: samples
              type: MultiSample flag
            - name: format
              type: pixel format
            - name: width
              type: uint32_t
            - name: height
              type: uint32_t
            - name: depth
              type: uint32_t
            - name: layers
              type: uint32_t
            - name: mipLevels
              type: uint32_t
            - name: deviceMask
              type: uint64_t

    - texture view desc:
        type: struct
        comment: Description about how the texture be used
        members:
            - name: view
              type: resource view type
            - name: state
              type: resource state
            - name: dimension
              type: texture dimension
            - name: mipLevel
              type: uint32_t

    - vertex input rate:
        type: enum
        vulkan: VkVertexInputRate
        enums:
            - PerVertex:
                vulkan: VK_VERTEX_INPUT_RATE_VERTEX
            - PerInstance:
                vulkan: VK_VERTEX_INPUT_RATE_INSTANCE

    - vertex layout:
        type: struct
        members:
            - name: rate
              type: vertex input rate
            - name: stride
              type: uint32_t

    - vertex attribute:
        type: struct
        members:
            - name: format
              type: vertex format
            - name: offset
              type: uint32_t
            - name: slot
              type: uint32_t

    - vertex input state:
        type: struct
        comment: Vertex input description
        members:
            - name: pAttributes
              type: const vertex attribute *
            - name: attributeCount
              type: uint32_t
            - name: pLayouts
              type: const vertex layout *
            - name: layoutCount
              type: uint32_t

    - render pipeline desc:
        type: struct
        comment: Description of rendering pipeline
        members:
            - name: rasterState
              type: rasterizer state
            - name: blendState
              type: blend state
            - name: depthStencil
              type: depth stencil state
            - name: inputState
              type: vertex input state
            - name: numRenderTargets
              type: uint32_t
            - name: renderTargetFormats[8]
              type: pixel format
            - name: depthStencilFormat
              type: pixel format
            - name: primitiveTopology
              type: primitive type
            - name: vertexFunction
              type: function *
            - name: pixelFunction
              type: function *
            - name: deviceMask
              type: uint64_t

    - binding type:
        type: enum
        enums:
          - Uniform Buffer
          - Sampler
          - Sampled Image
          - Storage Buffer

    - shader stage bit:
        type: enum
        bitmask: true
        enums:
          - Vertex
          - Fragment
          - Compute
          - Geometry
          - TessailationEval
          - TessailationControl

    - shader format:
        type: enum
        enums:
          - Text
          - Byte Code

    - shader lang:
        type: enum
        enums:
          - HLSL
          - MetalSL
          - GLSL

    - shader profile:
        type: enum
        enums:
          - SM4
          - SM5
          - SM6

    - shader data type:
        type: enum
        enums:
          - Bool
          - Bool2
          - Bool3
          - Bool4
          - Int
          - Int2
          - Int3
          - Int4
          - UInt
          - UInt2
          - UInt3
          - UInt4
          - Float
          - Float2
          - Float3
          - Float4
          - Mat2
          - Mat2x3
          - Mat2x4
          - Mat3x2
          - Mat3
          - Mat3x4
          - Mat4x2
          - Mat4
          - Unknown

    - shader bind type:
        type: enum
        enums:
          - Undefined
          - Block
          - Sampler
          - Texture
          - Sampler Texture
          - Buffer
          - Constant

    - shader binding:
        type: struct
        members:
          - name: name
            type: const char *
          - name: visibility
            type: shader stage bit
          - name: bindingType
            type: binding type
          - name: slot
            type: uint32_t
          - name: count
            type: uint32_t

    - bind table layout initializer:
        type: interface
        inherit: ref counted<false>
        functions:
            - add buffer:
                params:
                    - name: slot
                      type: uint32_t
                    - name: count
                      type: uint32_t
                    - name: visibility
                      type: shader stage bit
            - add texture:
                params:
                    - name: slot
                      type: uint32_t
                    - name: count
                      type: uint32_t
                    - name: visibility
                      type: shader stage bit
            - add sampler:
                params:
                    - name: slot
                      type: uint32_t
                    - name: visibility
                      type: shader stage bit
            - initialize:
                params:
                    - name: ppBindTableLayout
                      type: bind table layout **
                return: result
                    
    - bind table layout:
        type: interface
        inherit: ref counted<false>

    - pipeline layout desc:
        type: struct
        comment: Description of Pipeline Layout (How to layout bindings)
        members:
          - name: pShaderLayout
            type: const bind table layout *
          - name: shaderLayoutCount
            type: uint32_t

    - attachment desc:
        type: struct
        members:
          - name: loadAction
            type: load action
          - name: storeAction
            type: store action
          - name: texture
            type: texture *

    - color attachment desc:
        type: struct
        inherit: attachment desc
        members:
          - name: clearColor
            type: Float32x4

    - depth stencil attachment desc:
        type: struct
        inherit: attachment desc
        members:
          - name: clearDepth
            type: Float32
          - name: clearStencil
            type: int32_t

    - render pass desc:
        type: struct
        comment: Description of Render Pass
        members:
          - name: pColorAttachments
            type: color attachment desc *
          - name: colorAttachmentsCount
            type: int32_t
          - name: pDepthStencilAttachment
            type: depth stencil attachment desc *
  
    - frame buffer desc:
        type: struct
        comment: Description of frame buffer
        members:
          - name: colorAttachments[8]
            type: texture *
          - name: depthStencilAttachment
            type: texture *
          - name: layers
            type: uint32_t

    - draw indexed instanced desc:
        type: struct
        members:
            - name: indexCountPerInstance
              type: uint32_t
            - name: instanceCount
              type: uint32_t
            - name: startId
              type: uint32_t
            - name: baseVertexId
              type: uint32_t
            - name: startInstanceId
              type: uint32_t
    
    - draw instanced desc:
        type: struct
        members:
            - name: vertexCountPerInstance
              type: uint32_t
            - name: instanceCount
              type: uint32_t
            - name: startVertexId
              type: uint32_t
            - name: startInstanceId
              type: uint32_t

    - command queue type:
        type: enum
        enums:
            - Graphics
            - Compute
            - Copy

    - shader type:
        type: enum
        comment: Type of shader
        glslang: EShLanguage
        enums:
            - Vertex:
                glslang: EShLangVertex
            - Fragment:
                glslang: EShLangFragment
            - Compute:
                glslang: EShLangCompute
            - Geometry:
                glslang: EShLangGeometry
            - TessailationEval:
                glslang: EShLangTessEvaluation
            - TessailationControl:
                glslang: EShLangTessControl

    - viewport:
        type: struct
        members:
            - name: left, top
              type: Float32
            - name: width, height
              type: Float32
            - name: minDepth
              type: Float32
            - name: maxDepth
              type: Float32

    - swap chain desc:
        type: struct
        members:
            - name: pixelFormat
              type: pixel format
            - name: width
              type: uint32_t
            - name: height
              type: uint32_t
            - name: numColorBuffers
              type: uint32_t
            - name: hasDepthStencilTarget
              type: Bool32
            - name: depthStencilFormat
              type: pixel format

    - swap chain:
        type: interface
        inherit: named object<false>
        comment: Present drawables
        functions:
            - current drawable:
                return: drawable *
            - next drawable:
                return: drawable *
            - get texture:
                params:
                  - name: ppTexture
                    type: texture **
                  - name: index
                    type: uint32_t
                return: result
            - buffer count:
                return: uint32_t
            - init with render pass:
                params:
                    - name: pRenderPass
                      type: render pass *

    - function:
        type: interface
        inherit: ref counted<false>
        functions:
          - type:
              return: shader type
              const: true
          - name:
              return: const char *
              const: true

    - library:
        type: interface
        inherit: ref counted<false>
        functions:
           - make function:
                params:
                    - name: name
                      type: const char *
                    - name: ppFunction
                      type: function **
                return: result

    - shader option:
        type: struct
        members:
          - name: stage
            type: shader type
          - name: language
            type: shader lang
          - name: entryName
            type: const char *
          - name: profile
            type: shader profile
          - name: format
            type: shader format

    - data type:
        type: enum
        comment: For shader reflection
        enums:
            - none
            - struct
            - array
            - pointer
            - texture
            - bool
            - bool2
            - bool3
            - bool4
            - int
            - int2
            - int3
            - int4
            - uint
            - uint2
            - uint3
            - uint4
            - float
            - float2
            - float3
            - float4
            - mat2
            - mat2x3
            - mat2x4
            - mat3x2
            - mat3
            - mat3x4
            - mat4x2
            - mat4

    - variable type:
        type: interface
        comment: For shader reflection
        inherit: ref counted<false>
        functions:
            - get type:
                return: data type
        
    - argument access:
        type: enum
        bitmask: true
        enums:
            - read only
            - write only

    - variable:
        type: interface
        comment: For shader reflection
        inherit: ref counted<false>
        functions:
            - name:
                return: const char *
            - access:
                return: argument access
            - type:
                return: variable type *
            - index:
                return: uint32_t
            - active:
                return: bool

    - struct type:
        type: interface
        comment: Not ready yet
        inherit: variable type

    - array type:
        type: interface
        comment: uniform buffer
        inherit: variable type
        functions:
            - length:
                return: uint32_t
            - element type:
                return: data type
            - stride:
                return: uint32_t
            - elements:
                return: variable type *
    
    - pointer type:
        type: interface
        comment: storage class buffer
        inherit: variable type
        functions:
            - access:
                return: argument access
            - alignment:
                return: uint32_t
            - data size:
                return: uint32_t
            - element type:
                return: data type

    - texture refer type:
        type: interface
        inherit: variable type
        functions:
            - access:
                return: argument access
            - texture data type:
                return: data type
            - texture dim:
                return: texture dimension

    - pipeline reflection:
        type: interface
        inherit: ref counted<false>
        functions:
            - variable count:
                return: uint32_t
                const: true
            - variable at:
                params:
                    - name: id
                      type: uint32_t
                return: variable *
                const: true
            - get stage:
                return: shader type
                const: true

    - compile option:
        type: struct
        members:
          - name: stripDebugSymbols
            type: Bool32
          - name: optimizeSize
            type: Bool32
          - name: language
            type: shader lang
          - name: profile
            type: shader profile
          - name: format
            type: shader format

    - factory:
        type: interface
        inherit: named object<false>
        comment: Create devices and swapchains
        functions:
            - enum device:
                params:
                    - name: count
                      type: uint32_t *
                    - name: ppDevice
                      type: device **
                return: result
            - create swapchain:
                params:
                    - name: desc
                      type: NotNull const swap chain desc *
                    - name: pCommandQueue
                      type: NotNull command queue *
                    - name: pWindow
                      type: void *
                    - name: pSwapchain
                      type: NotNull swap chain **
                return: result

    - frame buffer:
        type: interface
        inherit: named object<false>
        functions:
            - compat with:
                params:
                    - name: pRenderPass
                      type: const render pass *
                return: Bool32

    - render pass:
        type: interface
        inherit: named object<false>

    - pipeline:
        type: interface
        inherit: named object<false>
        functions:
            - type:
                return: pipeline type
                const: true
            - get cache:
                params:
                  - name: pSize
                    type: uint64_t *
                  - name: pOutData
                    type: void *
                return: result

    - pipeline library:
        type: interface
        inherit: ref counted<false>
        functions:
            - store pipeline:
                params:
                    - name: key
                      type: const char *
                    - name: pPipeline
                      type: pipeline *
            - get serialized size:
                return: uint64_t
                const: true
            - serialize:
                params:
                    - name: pData
                      type: void *
                    - name: Size
                      type: uint64_t

    - compute pipeline:
        type: interface
        inherit: pipeline

    - render pipeline:
        type: interface
        inherit: pipeline
        functions:
            - get desc:
                params:
                    - name: pDesc
                      type: render pipeline desc *
                return: result

    - pipeline layout:
        type: interface
        inherit: named object<false>
        functions:
            - create bind table:
                params:
                    - name: ppBindingTable
                      type: bind table **
                return: result

    - bind table:
        type: interface
        inherit: named object<true>
        comment: Shader binding table
        functions:
            - setSampler:
                params:
                    - name: index
                      type: uint32_t
                    - name: shaderVis
                      type: shader type
                    - name: pSampler
                      type: sampler *
            - setBuffer:
                params:
                    - name: index
                      type: uint32_t
                    #- name: offset
                    #  type: uint32_t
                    - name: shaderVis
                      type: shader type
                    - name: bufferView
                      type: buffer view *
            - setTexture:
                params:
                    - name: index
                      type: uint32_t
                    - name: shaderVis
                      type: shader type
                    - name: textureView
                      type: texture view *

    # resources

    - sampler:
        type: interface
        inherit: named object<true>
        functions:
            - get desc:
                params:
                    - name: desc
                      type: sampler desc *
                return: result

    - resource:
        type: interface
        inherit: named object<true>
        functions:
            - map:
                params:
                    - name: offset
                      type: uint64_t
                    - name: size
                      type: uint64_t
                return: void *
            - un map

    - buffer:
        type: interface
        inherit: resource
        functions:
            - get desc:
                params:
                    - name: pDesc
                      type: buffer desc *
                return: result
            - create view:
                params:
                    - name: pDesc
                      type: const buffer view desc *
                    - name: ppView
                      type: buffer view **
                return: result

    - buffer view:
        type: interface
        inherit: named object<false>

    - texture:
        type: interface
        inherit: resource
        functions:
            - get desc:
                params:
                    - name: pDesc
                      type: texture desc *
                return: result
            - create view:
                params:
                    - name: pDesc
                      type: const texture view desc *
                    - name: ppView
                      type: texture view **
                return: result

    - texture view:
        type: interface
        inherit: named object<false>

    - drawable:
        type: interface
        inherit: ref counted<true>
        functions:
            - texture:
                return: texture *

    - device:
        type: interface
        inherit: named object<true>
        comment: Gpu device
        functions:
            - get desc:
                params:
                    - name: pDesc
                      type: NotNull device desc *
            - create command queue:
                params:
                    - name: queueType
                      type: command queue type
                    - name: pQueue
                      type: command queue **
                return: result
            - create bind table layout initializer:
                params:
                    - name: ppBTLInitializer
                      type: NotNull bind table layout initializer **
            - create pipeline layout:
                params:
                    - name: pPipelineLayoutDesc
                      type: NotNull const pipeline layout desc *
                    - name: ppPipelineLayout
                      type: pipeline layout **
                return: result
            - create bind table:
                params:
                    - name: pBindTableLayout
                      type: NotNull const bind table layout *
                    - name: ppBindingTable
                      type: bind table **
                return: result
            - create render pipeline:
                params:
                    - name: pPipelineDesc
                      type: NotNull const render pipeline desc *
                    - name: pPipelineLayout
                      type: Nullable pipeline layout *
                    - name: pRenderPass
                      type: Nullable render pass *
                    - name: pPipelineState
                      type: pipeline **
                return: result
                
            - create render pipeline:
                params:
                    - name: pPipelineDesc
                      type: NotNull const render pipeline desc *
                    - name: pRenderPass
                      type: Nullable render pass *
                    - name: pPipelineState
                      type: pipeline **
                    - name: ppReflection
                      type: NotNull pipeline reflection **
                return: result

            - create compute pipeline:
                params:
                    - name: pComputeFunction
                      type: NotNull function *
                    - name: pPipelineLayout
                      type: Nullable pipeline layout *
                    - name: ppPipeline
                      type: pipeline **
                return: result
                
            - create compute pipeline:
                params:
                    - name: pComputeFunction
                      type: NotNull function *
                    - name: ppPipeline
                      type: pipeline **
                    - name: ppReflection
                      type: NotNull pipeline reflection **
                return: result

            - create pipeline library:
                params:
                    - name: pData
                      type: const void *
                    - name: Size
                      type: uint64_t
                    - name: ppPipelineLibrary
                      type: pipeline library **
                return: result
            - create library:
                params:
                    - name: compileOption
                      type: const compile option *
                    - name: pData
                      type: const void *
                    - name: Size
                      type: uint64_t
                    - name: ppLibrary
                      type: library **
                return: result
            - create render pass:
                params:
                  - name: desc
                    type: NotNull const render pass desc *
                  - name: ppRenderpass
                    type: render pass **
                return: result
            - create frame buffer:
                params:
                  - name: desc
                    type: NotNull const frame buffer desc *
                  - name: ppRenderTarget
                    type: frame buffer **
                return: result
            - create sampler:
                params:
                    - name: desc
                      type: NotNull const sampler desc*
                    - name: pSampler
                      type: sampler **
                return: result
            - create buffer:
                params:
                    - name: desc
                      type: NotNull const buffer desc*
                    - name: pBuffer
                      type: buffer **
                return: result
            - create texture:
                params:
                    - name: desc
                      type: NotNull const texture desc *
                    - name: pTexture
                      type: texture **
                return: result
            - create fence:
                params:
                    - name: ppFence
                      type: fence **
                return: result
            - wait idle

    #device child:
    #    type: interface
    #    inherit: device
    - fence:
        type: interface
        inherit: named object<false>
        functions:
          - wait
          - reset

    - command queue:
        type: interface
        inherit: named object<true>
        functions:
            - create command buffer:
                params:
                    - type: command buffer **
                      name: ppComandBuffer
                return: result

    - command buffer:
        type: interface
        comment: Gpu Command Buffer
        inherit: named object<true>
        functions:
            - commit:
                params:
                  - type: fence *
                    name: pFence
            - create render command encoder:
                params:
                  - name: pDrawable
                    type: drawable *
                  - name: pRenderPass
                    type: render pass *                    
                  - name: ppRenderCommandEncoder
                    type: render command encoder **
                return: result
            - create compute command encoder:
                params:
                  - name: ppComputeCommandEncoder
                    type: compute command encoder **
                return: result
            - create copy command encoder:
                params:
                  - name: ppCopyCommandEncoder
                    type: copy command encoder **
                return: result
            - create parallel command encoder:
                params:
                  - name: ppCopyCommandEncoder
                    type: parallel render command encoder **
                return: result

    - command encoder:
        type: interface
        inherit: named object<true>
        functions:
            - barrier:
                params:
                    - name: pResource
                      type: resource *
            - set pipeline:
                params:
                  - name: pPipelineState
                    type: pipeline*
            - set bind table:
                params:
                  - name: pBindingTable
                    type: bind table *
            - end encode

    - copy command encoder:
        type: interface
        inherit: command encoder
        comment: Command Encoder used for Copy and Blit
        functions:
            - copy texture:
                params:
                  -
            - copy buffer:
                params:
                  - name: srcOffset
                    type: uint64_t
                  - name: dstOffset
                    type: uint64_t
                  - name: size
                    type: uint64_t
                  - name: srcBuffer
                    type: buffer *
                  - name: dstBuffer
                    type: buffer *

    - render command encoder:
        type: interface
        inherit: command encoder
        comment: Render Command Encoder
        functions:
            - set scissor rect:
                params:
                  - name: x
                    type: uint32_t
                  - name: y
                    type: uint32_t
                  - name: w
                    type: uint32_t
                  - name: h
                    type: uint32_t
            - set viewport:
                params:
                    - name: pViewport
                      type: const viewport *
            - set depth bias:
                params:
                    - name: biasConst
                      type: Float32
                    - name: biasClamp
                      type: Float32
                    - name: biasSlope
                      type: Float32
            - set depth bounds:
                params:
                    - name: minDepth
                      type: Float32
                    - name: maxDepth
                      type: Float32
            - set stencil reference:
                params:
                    - name: face
                      type: stencil face ref
                    - name: value
                      type: uint32_t
            - set blend consts:
                params:
                    - name: constant
                      type: Float32x4
            - set line width:
                params:
                    - name: width
                      type: Float32
            - set index buffer:
                params:
                    - name: pIndexBuffer
                      type: buffer *
            - set vertex buffer:
                params:
                    - name: slot
                      type: uint32_t
                    - name: offset
                      type: uint64_t
                    - name: pVertexBuffer
                      type: buffer *
            - draw instanced:
                params:
                    - name: drawParam
                      type: const draw instanced desc *
            - draw indexed instanced:
                params:
                    - name: drawParam
                      type: const draw indexed instanced desc *
            - draw indirect:
                params:
                    - name: pIndirectBuffer
                      type: buffer *
                    - name: offset
                      type: uint32_t
                    - name: drawCount
                      type: uint32_t
                    - name: stride
                      type: uint32_t
            - present:
                params:
                    - name: pDrawable
                      type: drawable *

    - compute command encoder:
        type: interface
        inherit: command encoder
        functions:
            - dispatch:
                params:
                    - name: x
                      type: uint32_t
                    - name: y
                      type: uint32_t
                    - name: z
                      type: uint32_t

    - parallel render command encoder:
        type: interface
        inherit: command encoder
        functions:
          - encoder:
              return: render command encoder *

    - create factory:
        type: function
        comment: Create NGFX API factory
        exported: true
        params:
            - name: ppFactory
              type: factory **
            - name: debugEnabled
              type: bool
        return: result
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: req_register.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "req_register.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google_public::protobuf::Descriptor* req_register_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  req_register_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_req_5fregister_2eproto() {
  protobuf_AddDesc_req_5fregister_2eproto();
  const ::google_public::protobuf::FileDescriptor* file =
    ::google_public::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "req_register.proto");
  GOOGLE_CHECK(file != NULL);
  req_register_descriptor_ = file->message_type(0);
  static const int req_register_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_register, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_register, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_register, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_register, sex_),
  };
  req_register_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      req_register_descriptor_,
      req_register::default_instance_,
      req_register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_register, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(req_register));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_public::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_req_5fregister_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    req_register_descriptor_, &req_register::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_req_5fregister_2eproto() {
  delete req_register::default_instance_;
  delete req_register_reflection_;
}

void protobuf_AddDesc_req_5fregister_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_public::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022req_register.proto\022\010protocol\"N\n\014req_re"
    "gister\022\020\n\010username\030\001 \002(\t\022\020\n\010password\030\002 \002"
    "(\t\022\r\n\005email\030\003 \002(\t\022\013\n\003sex\030\004 \001(\005", 110);
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "req_register.proto", &protobuf_RegisterTypes);
  req_register::default_instance_ = new req_register();
  req_register::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_req_5fregister_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_req_5fregister_2eproto {
  StaticDescriptorInitializer_req_5fregister_2eproto() {
    protobuf_AddDesc_req_5fregister_2eproto();
  }
} static_descriptor_initializer_req_5fregister_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int req_register::kUsernameFieldNumber;
const int req_register::kPasswordFieldNumber;
const int req_register::kEmailFieldNumber;
const int req_register::kSexFieldNumber;
#endif  // !_MSC_VER

req_register::req_register()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void req_register::InitAsDefaultInstance() {
}

req_register::req_register(const req_register& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void req_register::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

req_register::~req_register() {
  SharedDtor();
}

void req_register::SharedDtor() {
  if (username_ != &::google_public::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google_public::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (email_ != &::google_public::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void req_register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* req_register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_register_descriptor_;
}

const req_register& req_register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_req_5fregister_2eproto();
  return *default_instance_;
}

req_register* req_register::default_instance_ = NULL;

req_register* req_register::New() const {
  return new req_register;
}

void req_register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google_public::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google_public::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google_public::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool req_register::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // required string email = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional int32 sex = 4;
      case 4: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void req_register::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // required string email = 3;
  if (has_email()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      3, this->email(), output);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* req_register::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required string email = 3;
  if (has_email()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int req_register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_register::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const req_register* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const req_register*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void req_register::MergeFrom(const req_register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void req_register::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_register::CopyFrom(const req_register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void req_register::Swap(req_register* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(email_, other->email_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata req_register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = req_register_descriptor_;
  metadata.reflection = req_register_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
